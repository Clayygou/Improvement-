问题：
Say you have an array for which the ith element is the price of a given stock on day i.
If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.
Note that you cannot sell a stock before you buy one.
解析：
购买股票需要在卖出之前（重点）

方法1:时间复杂度o(n2)

class Solution:
    def maxProfit(self, prices: 'List[int]') -> 'int':
        max = 0
        for i in range(len(prices)):
            for j in range(i,len(prices)):
                if max < prices[j] - prices[i]:
                    max = prices[j] - prices[i]
        return max 

方法2：时间复杂度o(n)

class Solution:
    def maxProfit(self, prices: 'List[int]') -> 'int':
        min = 10000
        max = 0
        for i in prices:
            if i < min:
                min = i
            if i - min > max:
                max = i - min
        return max

方法3：o（n）
动态规划的思想 
前i天的最大收益 = max{前i-1天的最大收益，第i天的价格-前i-1天中的最小价格}

class Solution:
    def maxProfit(self, prices: 'List[int]') -> 'int':
        min_p, max_p = 999999, 0
        for i in range(len(prices)):
            min_p = min(min_p, prices[i])
            max_p = max(max_p, prices[i] - min_p)
        return max_p
        
总结：
时间复杂度的优化：
从内向外优化  找到代码重复运行的地方  不要有遗漏的地方
比较好的代码复杂度 O(1) < O(logn) < O(n1/2) < O(n) < O(nlogn)
